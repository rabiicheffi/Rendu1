// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(AMContext))]
    partial class AMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Analyse", b =>
                {
                    b.Property<int>("AnalyseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyseId"));

                    b.Property<int>("BilanCodeInfirmier")
                        .HasColumnType("int");

                    b.Property<int>("BilanCodePatient")
                        .HasColumnType("int");

                    b.Property<DateTime>("BilanDatePrelevement")
                        .HasColumnType("datetime2");

                    b.Property<int>("DureeResultat")
                        .HasColumnType("int");

                    b.Property<double>("PrixAnalyse")
                        .HasColumnType("float");

                    b.Property<string>("TypeAnalyse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ValeurAnalyse")
                        .HasColumnType("real");

                    b.Property<float>("ValuerMaxNormale")
                        .HasColumnType("real");

                    b.Property<float>("ValuerMinNormale")
                        .HasColumnType("real");

                    b.HasKey("AnalyseId");

                    b.HasIndex("BilanCodeInfirmier", "BilanCodePatient", "BilanDatePrelevement");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bilan", b =>
                {
                    b.Property<int>("CodeInfirmier")
                        .HasColumnType("int");

                    b.Property<int>("CodePatient")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePrelevement")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailMedecin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paye")
                        .HasColumnType("bit");

                    b.HasKey("CodeInfirmier", "CodePatient", "DatePrelevement");

                    b.HasIndex("CodePatient");

                    b.ToTable("Bilans");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Infirimier", b =>
                {
                    b.Property<int>("InfirimierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfirimierId"));

                    b.Property<int>("LaboratoireId")
                        .HasColumnType("int");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specialite")
                        .HasColumnType("int");

                    b.HasKey("InfirimierId");

                    b.HasIndex("LaboratoireId");

                    b.ToTable("Infirmiers");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Laboratoire", b =>
                {
                    b.Property<int>("LaboratoireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaboratoireId"));

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AdresseLabo");

                    b.HasKey("LaboratoireId");

                    b.ToTable("Laboratoires");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Patient", b =>
                {
                    b.Property<int>("CodePatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodePatient"));

                    b.Property<string>("EmailPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Informations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodePatient");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Analyse", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Bilan", "Bilan")
                        .WithMany("Analyse")
                        .HasForeignKey("BilanCodeInfirmier", "BilanCodePatient", "BilanDatePrelevement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bilan");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bilan", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Infirimier", "Infirimier")
                        .WithMany("BilanList")
                        .HasForeignKey("CodeInfirmier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Patient", "Patient")
                        .WithMany("BilanList")
                        .HasForeignKey("CodePatient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Infirimier");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Infirimier", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Laboratoire", "Laboratoire")
                        .WithMany("Infirimiers")
                        .HasForeignKey("LaboratoireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratoire");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Bilan", b =>
                {
                    b.Navigation("Analyse");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Infirimier", b =>
                {
                    b.Navigation("BilanList");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Laboratoire", b =>
                {
                    b.Navigation("Infirimiers");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Patient", b =>
                {
                    b.Navigation("BilanList");
                });
#pragma warning restore 612, 618
        }
    }
}
